// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Write;

namespace Shop.Write._migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220213224549_AddExclusionsToLineItems")]
    partial class AddExclusionsToLineItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shop.Write.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Shop.Write.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAwaitingConfirmation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAwaitingFulfillment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAwaitingPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefundDue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("bit");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Refunded")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tip")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Shop.Write.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDessert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSide")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Shop.Write.Sales.LineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExcludingApricots")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingBerries")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingBleuCheese")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingBrie")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingCaramel")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingCherry")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingChocolate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingDill")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingGarlic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingGoatCheese")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingGrapes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingGreenOlives")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingHoney")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingKalamataOlives")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingMustard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingNuts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingPeppers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingPomegranateSeeds")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingProsciutto")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingSalami")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingSharpCheeses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingSpicy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcludingVanilla")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("LineItem");
                });

            modelBuilder.Entity("Shop.Write.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkuToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Shop.Write.Sales.LineItem", b =>
                {
                    b.HasOne("Shop.Write.Order", null)
                        .WithMany("LineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop.Write.Order", b =>
                {
                    b.Navigation("LineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
